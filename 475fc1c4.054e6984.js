(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{124:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return b}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=r.a.createContext({}),u=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return r.a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),s=u(t),d=o,b=s["".concat(c,".").concat(d)]||s[d]||p[d]||a;return t?r.a.createElement(b,l(l({ref:n},i),{},{components:t})):r.a.createElement(b,l({ref:n},i))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var i=2;i<a;i++)c[i]=t[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},86:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return m})),t.d(n,"default",(function(){return u}));var o=t(3),r=t(7),a=(t(0),t(124)),c={title:"Create your own"},l={unversionedId:"commands/create",id:"commands/create",isDocsHomePage:!1,title:"Create your own",description:"How to declare commands ?",source:"@site/docs/commands/create.md",slug:"/commands/create",permalink:"/thelia_doc/docs/commands/create",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/commands/create.md",version:"current",sidebar:"docs",previous:{title:"How it works",permalink:"/thelia_doc/docs/commands/index"},next:{title:"Thelia commands",permalink:"/thelia_doc/docs/commands/thelia"}},m=[{value:"How to declare commands ?",id:"how-to-declare-commands-",children:[]}],i={toc:m};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"how-to-declare-commands-"},"How to declare commands ?"),Object(a.b)("p",null,"In your config file :"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'    <commands>\n        <command class="MyModule\\Commands\\HelloWorld"/>\n    </commands>\n')),Object(a.b)("p",null,"Create now a HelloWorld.php file in directory MyModule/Commands, and create a HelloWorld, which has to extend ",Object(a.b)("em",{parentName:"p"},"Thelia\\Command\\ContainerAwareCommand")," and implement at least the ",Object(a.b)("em",{parentName:"p"},"configure")," and\n",Object(a.b)("em",{parentName:"p"},"execute")," methods."),Object(a.b)("p",null,"For example :"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-php"}),'<?php\n\nnamespace MyModule\\Commands;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nuse Thelia\\Command\\ContainerAwareCommand;\n\nclass HelloWorld extends ContainerAwareCommand\n{\n    protected function configure()\n    {\n        $this\n            ->setName("hello:world")\n            ->setDescription("output hello world");\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->writeln("Hello world !");\n    }\n}\n\n')),Object(a.b)("p",null,"You can now test the results using Thelia CLI tools. Go to your Thelia root directory and use this command :"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"$ php Thelia hello:world\n")),Object(a.b)("p",null,'Thelia uses all the features of the Symfony "command" component so you can refer to ',Object(a.b)("a",{href:"http://symfony.com/doc/2.2/components/console/index.html",target:"_blank"},"this component documentation")," to create your Thelia commands."))}u.isMDXComponent=!0}}]);