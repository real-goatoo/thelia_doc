"use strict";(self.webpackChunkthelia=self.webpackChunkthelia||[]).push([[7634],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||l;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3448:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={title:"Events",sidebar_position:5},s=void 0,d={unversionedId:"events/index",id:"events/index",title:"Events",description:"Thelia use the Observer Pattern for managing all the action like creating a new customer, updating a product. For each action an event is dispatching containing an event object. Event object contains only data.",source:"@site/docs/events/index.md",sourceDirName:"events",slug:"/events/",permalink:"/thelia_doc/docs/events/",draft:!1,editUrl:"https://github.com/real-goatoo/thelia_doc/edit/master/docs/events/index.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Events",sidebar_position:5},sidebar:"myAutogeneratedSidebar",previous:{title:"Product",permalink:"/thelia_doc/docs/loops/product"},next:{title:"Smarty plugins",permalink:"/thelia_doc/docs/smarty_plugins/"}},p={},u=[{value:"Loop events",id:"loop-events",level:2},{value:"Propel events",id:"propel-events",level:2},{value:"Form Events",id:"form-events",level:2},{value:"Thelia events",id:"thelia-events",level:2}],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Thelia use the Observer Pattern for managing all the action like creating a new customer, updating a product. For each action an event is dispatching containing an event object. Event object contains only data."),(0,l.kt)("p",null,"You can create your own events by following the Symfony ",(0,l.kt)("a",{parentName:"p",href:"https://symfony.com/doc/current/event_dispatcher.html"},"documentation")," or using one of the Thelia native events :"),(0,l.kt)("h2",{id:"loop-events"},"Loop events"),(0,l.kt)("p",null,"These events are dynamics and are sent for every loops even the one you create in your modules.\nThey are 5 types of events :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TheliaEvents::LOOP_EXTENDS_ARG_DEFINITIONS")," For add/remove arguments of a loop "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TheliaEvents::LOOP_EXTENDS_INITIALIZE_ARGS")," For  manipulate the value of arguments provided to a loop"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TheliaEvents::LOOP_EXTENDS_BUILD_MODEL_CRITERIA")," For manipulate the Propel query for PropelSearchLoopInterface loops"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TheliaEvents::LOOP_EXTENDS_BUILD_ARRAY")," For manipulate the array for ArraySearchLoopInterface loops"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TheliaEvents::LOOP_EXTENDS_PARSE_RESULTS")," For manipulate the loop results")),(0,l.kt)("p",null,"To specify on which loop you want listen the event you have to suffixing the event name by the loop name, we have created a static function to make it easier.",(0,l.kt)("br",{parentName:"p"}),"\n","For example to add argument to the ",(0,l.kt)("inlineCode",{parentName:"p"},"lang")," loop we have to do this :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"    public static function getSubscribedEvents()\n    {\n        return [\n            TheliaEvents::getLoopExtendsEvent(TheliaEvents::LOOP_EXTENDS_ARG_DEFINITIONS, 'lang') => ['updateLangArgDefinitions', 128]\n        ];\n    }\n")),(0,l.kt)("p",null,"And here is a full example of what you can do with loop events :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"class LoopExtend implements EventSubscriberInterface\n{\n    public function __construct(private RequestStack $requestStack)\n    {}\n\n    /**\n     * @inheritdoc\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            // Lang\n            TheliaEvents::getLoopExtendsEvent(TheliaEvents::LOOP_EXTENDS_ARG_DEFINITIONS, 'lang') => ['langArgDefinitions', 128],\n            TheliaEvents::getLoopExtendsEvent(TheliaEvents::LOOP_EXTENDS_INITIALIZE_ARGS, 'lang') => ['langInitializeArgs', 128],\n            TheliaEvents::getLoopExtendsEvent(TheliaEvents::LOOP_EXTENDS_BUILD_MODEL_CRITERIA, 'lang') => ['langBuildModelCriteria', 128],\n            TheliaEvents::getLoopExtendsEvent(TheliaEvents::LOOP_EXTENDS_PARSE_RESULTS, 'lang') => ['langParseResults', 128],\n            // Cart\n            TheliaEvents::getLoopExtendsEvent(TheliaEvents::LOOP_EXTENDS_BUILD_ARRAY, 'cart') => ['cartBuildArray', 128],\n        ];\n    }\n\n    /**\n     * Add a new parameter for loop lang\n     * you can now call the loop with this argument\n     */\n    public function langArgDefinitions(LoopExtendsArgDefinitionsEvent $event)\n    {\n        $argument = $event->getArgumentCollection();\n        $argument->addArgument(Argument::createBooleanTypeArgument('uuid', false));\n    }\n\n    /**\n     * Set the UUID parameters from the query string\n     */\n    public function langInitializeArgs(LoopExtendsInitializeArgsEvent $event)\n    {\n        $parameters = $event->getLoopParameters();\n        if ($this->requestStack->getCurrentRequest()->query->has('loop-uuid')) {\n            $parameters['uuid'] = 1;\n            $event->setLoopParameters($parameters);\n        }\n    }\n\n    /**\n     * Change the query search of the loop lang\n     */\n    public function langBuildModelCriteria(LoopExtendsBuildModelCriteriaEvent $event)\n    {\n        // not very useful but it's for the example\n        $event->getModelCriteria()->orderBy('id', Criteria::DESC);\n    }\n\n    /**\n     * Add the UUID variable to the output variables of the loop lang\n     */\n    public function langParseResults(LoopExtendsParseResultsEvent $event)\n    {\n        $loopResult = $event->getLoopResult();\n        $arguments = $event->getLoop()->getArgumentCollection();\n        if ($arguments->get('uuid')->getValue()) {\n            foreach ($loopResult as $row) {\n                $row->set('UUID', uniqid());\n            }\n        }\n    }\n\n    /**\n     * Change cart items\n     */\n    public function cartBuildArray(LoopExtendsBuildArrayEvent $event)\n    {\n        $elements = $event->getArray();\n\n        /** @var CartItem $item */\n        foreach ($elements as $item) {\n            $item->setPrice(\"0\");\n        }\n    }\n}\n")),(0,l.kt)("h2",{id:"propel-events"},"Propel events"),(0,l.kt)("p",null,"Every action to the database done by propel on every model fire an event.",(0,l.kt)("br",{parentName:"p"}),"\n","Each model has its own events, the events list and names are stored in a generated class that have the model name suffixed by ",(0,l.kt)("inlineCode",{parentName:"p"},"Event")," and all events carry this class.",(0,l.kt)("br",{parentName:"p"}),"\n","For example to listen every time a product is inserted in the database we have to add this in a subscriber"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"    public static function getSubscribedEvents()\n    {\n        return [\n            ProductEvent::POST_INSERT => ['doSomething', 128]\n        ];\n    }\n")),(0,l.kt)("p",null,"Then in your function you can get the propel product model by calling the method ",(0,l.kt)("inlineCode",{parentName:"p"},"getModel()")," on the event class :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"    public function doSomething(ProductEvent $productEvent)\n    {\n        $product = $productEvent->getModel();\n    }\n")),(0,l.kt)("h2",{id:"form-events"},"Form Events"),(0,l.kt)("p",null,"In Thelia you can modify form from your module to add or remove some field.",(0,l.kt)("br",{parentName:"p"}),"\n","Two events exists for each form, ",(0,l.kt)("inlineCode",{parentName:"p"},"FORM_BEFORE_BUILD")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"FORM_AFTER_BUILD")," with the form name as suffix.\nThe more useful is ",(0,l.kt)("inlineCode",{parentName:"p"},"FORM_AFTER_BUILD")," because here you have the base form built, so you can modify it.",(0,l.kt)("br",{parentName:"p"}),"\n","This is an example for adding and modify fields (in symfony form we can't really modify a field so we have to remove then re-add it) :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"class CustomerCreateFormExtend implements EventSubscriberInterface\n{\n    public function __construct(private RequestStack $requestStack)\n    {}\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            TheliaEvents::FORM_AFTER_BUILD.'.'.CustomerCreateForm::getName() => ['addFieldsOnCustomerCreate', 128],\n            TheliaEvents::FORM_AFTER_BUILD.'.'.ResetPasswordForm::getName() => ['addResetFormPasswordMask', 128]\n        ];\n    }\n\n    public function addFieldsOnCustomerCreate(TheliaFormEvent $event): void\n    {\n        $currentRequest = $this->requestStack->getCurrentRequest();\n\n        $event->getForm()->getFormBuilder()\n            ->add(\n                'profil',\n                 TextType::class, \n                 [\n                    'required' => true\n                ]\n            )\n            ->remove(\"password\")\n            ->add('password', PasswordType::class, [\n                'constraints' => [\n                    new NotBlank(),\n                    new Length([\n                            'min' => 8\n                        )]),\n                    new Callback([$this, 'customerFormPasswordMask']),\n                ],\n                'label' => Translator::getInstance()->trans('Password'),\n                'label_attr' => [\n                    'for' => 'password',\n                ],\n            ]);\n        }\n    }\n")),(0,l.kt)("h2",{id:"thelia-events"},"Thelia events"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Event name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Event class"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::BOOT"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\DefaultActionEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent at the very beginning of application life")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ADMIN_LOGIN"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\DefaultActionEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent once the administrator is successfully logged in")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ADMIN_LOGOUT"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\DefaultActionEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent before the logout of the administrator")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CUSTOMER_LOGIN"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Customer\\CustomerLoginEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when customer is successfully logged in")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CUSTOMER_LOGOUT"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\DefaultActionEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when the customer logged out")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::LOST_PASSWORD"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\LostPasswordEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when a customer need a new password.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CART_CREATE_NEW"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Cart\\CartCreateEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when a new cart is initialized")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CART_DUPLICATE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Cart\\CartDuplicationEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when a new existing cat id duplicated. This append when current customer is different from current cart. The old cart is already deleted from the database when this event is dispatched.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CART_DUPLICATED"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Cart\\CartDuplicationEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when the cart is duplicated, but not yet deleted from the database.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CART_ITEM_DUPLICATE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Cart\\CartItemDuplicationItem"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when a cart item is duplicated")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CART_ADDITEM"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Cart\\CartEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when a customer add an item to his cart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CART_UPDATEITEM"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Cart\\CartEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when a customer update an item of his cart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::CART_DELETEITEM"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Cart\\CartEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when a customer remove an item from his cart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_SET_DELIVERY_ADDRESS"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when the customer choose a delivery address for his current cart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_SET_DELIVERY_MODULE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when the customer choose a delivery module for his current cart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_SET_POSTAGE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when the postage is computed by the delivery module")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_SET_INVOICE_ADDRESS"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when the customer choose a invoice address for his current cart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_SET_PAYMENT_MODULE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when the customer choose a payment module for his current cart")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_PAY"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent on the order pay process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_SEND_CONFIRMATION_EMAIL"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when Thelia send an order confirmation mail to customer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\TheliaEvents::ORDER_SEND_NOTIFICATION_EMAIL"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Thelia\\Core\\Event\\Order\\OrderEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Sent when Thelia send an order notification mail to admin shop")))))}c.isMDXComponent=!0}}]);