"use strict";(self.webpackChunkthelia=self.webpackChunkthelia||[]).push([[6030],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return m}});var n=o(7294);function l(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){l(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function p(e,t){if(null==e)return{};var o,n,l=function(e,t){if(null==e)return{};var o,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(l[o]=e[o]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}var i=n.createContext({}),s=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},u=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(o),m=l,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||a;return o?n.createElement(h,r(r({ref:t},u),{},{components:o})):n.createElement(h,r({ref:t},u))}));function m(e,t){var o=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=o.length,r=new Array(a);r[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:l,r[1]=p;for(var s=2;s<a;s++)r[s]=o[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},5351:function(e,t,o){o.r(t),o.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var n=o(7462),l=o(3366),a=(o(7294),o(3905)),r=["components"],p={title:"Loops"},i=void 0,s={unversionedId:"loops/index",id:"loops/index",title:"Loops",description:"Loops are the most convenient feature in Thelia for front developers. Already there in Thelia's first version, they deserved a makeover for Thelia v2.",source:"@site/docs/loops/index.md",sourceDirName:"loops",slug:"/loops/",permalink:"/docs/docs/loops/",draft:!1,editUrl:"https://github.com/thelia/docs/edit/main/docs/loops/index.md",tags:[],version:"current",frontMatter:{title:"Loops"},sidebar:"myAutogeneratedSidebar",previous:{title:"Dockerize your Thelia",permalink:"/docs/docs/getting_started/docker"},next:{title:"Global arguments",permalink:"/docs/docs/loops/global_arguments"}},u={},c=[{value:"Classic loop",id:"classic-loop",level:3},{value:"Conditional loop",id:"conditional-loop",level:3},{value:"Page loop",id:"page-loop",level:3},{value:"Declare your loops",id:"declare-your-loops",level:2},{value:"Implement your loops",id:"implement-your-loops",level:2},{value:"What&#39;s the difference betwen <em>PropelSearchLoopInterface</em> and <em>ArraySearchLoopInterface</em>",id:"whats-the-difference-betwen-propelsearchloopinterface-and-arraysearchloopinterface",level:3},{value:"Example 1",id:"example-1",level:3}],d={toc:c};function m(e){var t=e.components,o=(0,l.Z)(e,r);return(0,a.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Loops are the most convenient feature in Thelia for front developers. Already there in Thelia's first version, they deserved a makeover for Thelia v2."),(0,a.kt)("p",null,"Loops allow to get data from your shop back-end and display them in your front view. In Thelia v2, loops are a ",(0,a.kt)("a",{href:"http://www.smarty.net",target:"_blank"},"Smarty v3")," plugin."),(0,a.kt)("p",null,"From Thelia 2.4.0, when an unknown loop type is found in a template, no exeption is thrown in production mode, and an error is added to the log. In development mode, the exception is thrown as before. This way, disabling a module will no longer break a front office where this plugin's loops are used."),(0,a.kt)("h3",{id:"classic-loop"},"Classic loop"),(0,a.kt)("p",null,"Here is a piece of html code which intends to list 4 random products from your shop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<div>\n    <div class="product-block">\n        PRODUCT 0 (ref : 0535233)<br />\n        The ideal product to have fun.<br />\n        <strong>Afford it for 70 \u20ac</strong>\n    </div>\n    <div class="product-block">\n        PRODUCT 1 (ref : 1245152)<br />\n        A very beautiful product to make you happy.<br />\n        <strong>Afford it for only 10 \u20ac (instead of 100) !</strong>\n    </div>\n    <div class="product-block">\n        PRODUCT 2 (ref : 9437252)<br />\n        A perfect product to procrastinate.<br />\n        <strong>Afford it for 20 \u20ac</strong>\n    </div>\n    <div class="product-block">\n        PRODUCT 4 (ref : 3566236)<br />\n        The product which will change your life.<br />\n        <strong>Afford it for only 1 000 \u20ac (instead of 1 000 000) !</strong>\n    </div>\n</div>\n')),(0,a.kt)("p",null,"How to make this piece of code dynamic ? Gathering the products you set up in your Thelia v2 back-office ?"),(0,a.kt)("p",null,"Just use a Thelia product loop :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-smarty"},'<div>\n    {loop type="product" name="my_product_loop" limit="4" order="random"}\n    <div class="product-block">\n        {$TITLE} (ref : {$REF})<br />\n        {$DESCRIPTION}<br />\n        <strong>\n            {if $IS_PROMO == 1}\n                Afford it for only {$PROMO_PRICE} \u20ac (instead of {$PRICE}) !\n            {else}\n                Afford it for {$PRICE} \u20ac\n            {/if}\n        </strong>\n    </div>\n    {/loop}\n</div>\n')),(0,a.kt)("p",null,"And what if you want only the products you tagged as new ? And which are from category 3 and 5 ? And whose price is at least 100 \u20ac ?"),(0,a.kt)("p",null,"No problem ! Here you are :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-smarty"},'<div>\n    {loop type="product" name="my_product_loop" limit="4" order="random" new="true" category="3,5" min_price="100"}\n    <div class="product-block">\n        [...]\n    </div>\n    {/loop}\n</div>\n')),(0,a.kt)("p",null,"You can of course use a loop into another loop and pass a loop output to another loop parameter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-smarty"},'{loop type="category" name="my_category_loop"}\n    <h2>{$TITLE}</h2>\n        {loop type="product" name="my_product_loop" category="{$ID}"}\n        <div class="product-block">\n            [...]\n        </div>\n        {/loop}\n{/loop}\n</div>\n')),(0,a.kt)("p",null,"Thelia 2 provides a lot of loop types. You can see all the loops and their parameters / outputs in the ",(0,a.kt)("strong",null,"Loops")," sidebar menu."),(0,a.kt)("h3",{id:"conditional-loop"},"Conditional loop"),(0,a.kt)("p",null,"Conditional loops allow to define a different behaviour depending on if the a classic loop displays something or not."),(0,a.kt)("p",null,"A conditional loop is therefore linked to a classic loop using the ",(0,a.kt)("inlineCode",{parentName:"p"},"rel")," attribute which must match a classic loop ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," attribute."),(0,a.kt)("p",null,"For example, you want to display all the associated content of a product in an unorder list (ul). If the product has no associated contents you won't display empty ",(0,a.kt)("inlineCode",{parentName:"p"},"<ul></ul>"),". And you want a message to inform there is no available content. You can use a conditional loop to do this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-smarty"},'{ifloop rel="my_associated_content_loop"}\n    Associated contents for this product :\n    <ul>\n        {loop type="associated_content" name="my_associated_content_loop" product="12"}\n            <li>\n                <a href="{$URL}">{$TITLE}</a>\n            </li>\n        {/loop}\n    </ul>\n{/ifloop}\n{elseloop rel="my_associated_content_loop"}\n    No associated content for this product\n{/elseloop}\n')),(0,a.kt)("h3",{id:"page-loop"},"Page loop"),(0,a.kt)("p",null,"Page loops can be use on any classic loop which has ",(0,a.kt)("inlineCode",{parentName:"p"},"page")," parameter. Page loops list all the pages the classic loop needs to display all it's returns."),(0,a.kt)("p",null,"A page loop is therefore linked to a classic loop using the ",(0,a.kt)("inlineCode",{parentName:"p"},"rel")," attribute which must match a classic loop ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," attribute."),(0,a.kt)("p",null,"By default, 10 pages are displayed. You can change this value using ",(0,a.kt)("inlineCode",{parentName:"p"},"limit")," parameter."),(0,a.kt)("p",null,"List of output parameters :"),(0,a.kt)("div",{class:"table-responsive"},(0,a.kt)("table",{class:"table table-striped table-bordered"},(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"Variable"),(0,a.kt)("th",null,"Description"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,"$PAGE"),(0,a.kt)("td",null,"Current page number. This value is equal to the ```page``` loop parameter.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"$END"),(0,a.kt)("td",null,"The last displayed page number")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"$CURRENT"),(0,a.kt)("td",null,"on each loop, this value is incremented. So it's started with the $PAGE value and end with the $END value")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"$LAST"),(0,a.kt)("td",null,"Max page number. If a loop generates 761 pages, the value of $LAST is 761")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"$PREV"),(0,a.kt)("td",null,"previous page number. This value is always $PAGE-1 if $PAGE is greater than 1. The value is 1 therefore")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"$NEXT"),(0,a.kt)("td",null,"next page number. This value is always $PAGE+1 if $PAGE is less than $LAST. The value is $LAST therefore"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-smarty"},'<div class="text-center">\n    <ul class="pagination pagination-centered">\n    {pageloop rel="customer_list" limit="20"}\n        {if $PAGE == $CURRENT && $PAGE > 2}\n            <li><a href="{url path="/admin/customers" page=$PREV}">&lsaquo;</a></li>\n        {/if}\n\n        {if $PAGE != $CURRENT}\n            <li><a href="{url path="/admin/customers" page="{$PAGE}"}">{$PAGE}</a></li>\n\n        {else}\n            <li class="active"><a href="#">{$PAGE}</a></li>\n        {/if}\n\n        {if $PAGE == $END && $PAGE < $LAST}\n            <li><a href="{url path="/admin/customers" page=$NEXT}">&rsaquo;</a></li>\n        {/if}\n    {/pageloop}\n    </ul>\n</div>\n')),(0,a.kt)("h2",{id:"declare-your-loops"},"Declare your loops"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<loops>\n    <loop name="mymodule_product" class="MyModule\\Loop\\Product" />\n    <loop name="mymodule_myloop" class="MyModule\\Loop\\MyLoop" />\n</loops>\n')),(0,a.kt)("p",null,"You have to create as many loop node as loop you have into the loops node. In this example there is 2 loops. Name and\nclass properties are mandatory. The name is the loop name used into the template ( like in Thelia v1 : ",(0,a.kt)("inlineCode",{parentName:"p"},'<THELIA_name\ntype="MyModule_Product">...</THELIA_name>'),"), class property is the class executed by the template engine. This\nclass must extends the Thelia\\Core\\Template\\Element\\BaseLoop abstract class, if not an exception is thrown.\n",(0,a.kt)("strong",{parentName:"p"},"If you name your loop like a default loop (eg : product), your loop will replace the default loop.")),(0,a.kt)("h2",{id:"implement-your-loops"},"Implement your loops"),(0,a.kt)("p",null,"Your loop can be anywhere (Thanks to namespace) in your module but it's better to create a Loop directory and put all your loops in this directory."),(0,a.kt)("p",null,"You have to extends the Thelia\\Core\\Template\\Element\\BaseLoop abstract class and implement either Thelia\\Core\\Template\\Element\\PropelSearchLoopInterface or Thelia\\Core\\Template\\Element\\ArraySearchLoopInterface. Therefore you will have to create ",(0,a.kt)("em",{parentName:"p"},"getArgDefinitions"),", ",(0,a.kt)("em",{parentName:"p"},"parseResults")," and either ",(0,a.kt)("em",{parentName:"p"},"buildModelCriteria")," or ",(0,a.kt)("em",{parentName:"p"},"buildArray")," methods."),(0,a.kt)("p",null,"NB : You can also extend BaseI18nLoop which itself extends BaseLoop. This will provide tools to manage i18n in your loop."),(0,a.kt)("h3",{id:"whats-the-difference-betwen-propelsearchloopinterface-and-arraysearchloopinterface"},"What's the difference betwen ",(0,a.kt)("em",{parentName:"h3"},"PropelSearchLoopInterface")," and ",(0,a.kt)("em",{parentName:"h3"},"ArraySearchLoopInterface")),(0,a.kt)("p",null,"It's a matter of data type. If the data your loop returns come from the database you must implement ",(0,a.kt)("em",{parentName:"p"},"PropelSearchLoopInterface")," and create ",(0,a.kt)("em",{parentName:"p"},"buildModelCriteria")," method which return a ",(0,a.kt)("em",{parentName:"p"},"Propel\\Runtime\\ActiveQuery\\ModelCriteria"),". Conversely if your loop displays data from an array you must implement ",(0,a.kt)("em",{parentName:"p"},"ArraySearchLoopInterface")," and create ",(0,a.kt)("em",{parentName:"p"},"buildArray")," method which return an array."),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"parseResults")," method is used to render the template. It must return a Thelia\\Core\\Template\\Element\\LoopResult instance."),(0,a.kt)("p",null,"The getArgDefinitions method defines all args used in your loop. Args can be mandatory, optional, with default value, etc. This method must return an Thelia\\Core\\Template\\Loop\\Argument\\ArgumentCollection. ArgumentCollection contains Thelia\\Core\\Template\\Loop\\Argument which contains a Thelia\\Type\\TypeCollection. Types in the collection must implement Thelia\\Type\\TypeInterface."),(0,a.kt)("p",null,"If you don't define your arguments here, you can't use them in your new loop. All arguments are accessible in the ",(0,a.kt)("inlineCode",{parentName:"p"},"parseResults")," method."),(0,a.kt)("p",null,"Baseloop class declares 3 public properties you might overload in your new loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public $countable = true;\npublic $timestampable = false;\npublic $versionable = false;\n")),(0,a.kt)("p",null,"With these properties set to true, the loop will automatically render - or not - the following outputs :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"if($countable === true)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"LOOP_COUNT"),(0,a.kt)("li",{parentName:"ul"},"LOOP_TOTAL")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"if($timestampable === true) //available if your table is timestampable\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CREATE_DATE"),(0,a.kt)("li",{parentName:"ul"},"CREATE_UPDATE")),(0,a.kt)("h3",{id:"example-1"},"Example 1"),(0,a.kt)("p",null,'Here an example for my module "MyModule" and my loops in the loop directory. This is the architecture :'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\\local\n  \\modules\n    \\MyModule\n      ...\n      \\Loop\n        MyLoop.php\n")),(0,a.kt)("p",null,"MyLoop.php file :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"namespace MyModule\\Loop;\n\nuse Thelia\\Core\\Template\\Element\\BaseLoop;\nuse Thelia\\Core\\Template\\Element\\LoopResult;\nuse Thelia\\Core\\Template\\Element\\LoopResultRow;\nuse Thelia\\Core\\Template\\Element\\ArraySearchLoopInterface;\nuse Thelia\\Core\\Template\\Loop\\Argument\\ArgumentCollection;\nuse Thelia\\Core\\Template\\Loop\\Argument\\Argument;\n\nclass MyLoop extends BaseLoop implements ArraySearchLoopInterface {\n\n   public $countable = true;\n   public $timestampable = false;\n   public $versionable = false;\n\n    public function getArgDefinitions()\n    {\n        return new ArgumentCollection(\n            Argument::createIntListTypeArgument('start', 0),\n            Argument::createIntListTypeArgument('stop', null, true)\n        );\n    }\n\n    public function buildArray()\n    {\n        $items = array();\n\n        $start = $this->getStart();\n        $stop = $this->getStop();\n\n        for($i=$start; $i<=$stop; $i++ {\n           $items[] = $i;\n        }\n\n        return $items;\n\n    }\n\n    public function parseResults(LoopResult $loopResult)\n    {\n        foreach ($loopResult->getResultDataCollection() as $item) {\n\n            $loopResultRow = new LoopResultRow();\n\n            $loopResultRow->set(\"MY_OUTPUT\", $item);\n\n            $loopResult->addRow($loopResultRow);\n        }\n\n        return $loopResult;\n    }\n}\n\n")),(0,a.kt)("p",null,"Of course you can use all classes you want in your own loop class, like model class. All Thelia's model classes are in the\nnamespace Thelia\\Model"),(0,a.kt)("p",null,"So if I want to add some search in my DB and return results from product table I can use something like this :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'public function buildModelCriteria()\n{\n   return ProductQuery::create();\n}\n\npublic function parseResults(LoopResult $loopResult)\n{\n    foreach ($loopResult->getResultDataCollection() as $product) {\n\n       $loopResultRow = new LoopResultRow($product);\n\n       $loopResultRow->set("REF", $product->getRef());\n\n       $loopResult->addRow($loopResultRow);\n   }\n\n   return $loopResult;\n}\n')))}m.isMDXComponent=!0}}]);