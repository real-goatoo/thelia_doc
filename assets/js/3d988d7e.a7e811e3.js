"use strict";(self.webpackChunkthelia=self.webpackChunkthelia||[]).push([[1918],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},s=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||n;return r?o.createElement(f,d(d({ref:t},s),{},{components:r})):o.createElement(f,d({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,d=new Array(n);d[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,d[1]=l;for(var c=2;c<n;c++)d[c]=r[c];return o.createElement.apply(null,d)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6961:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var o=r(7462),a=(r(7294),r(3905));const n={title:"Addons",sidebar_position:2,description:"Add data to Thelia model API"},d=void 0,l={unversionedId:"api/addons",id:"api/addons",title:"Addons",description:"Add data to Thelia model API",source:"@site/docs/api/addons.md",sourceDirName:"api",slug:"/api/addons",permalink:"/thelia_doc/docs/api/addons",draft:!1,editUrl:"https://github.com/thelia/docs/edit/main/docs/api/addons.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Addons",sidebar_position:2,description:"Add data to Thelia model API"},sidebar:"docs",previous:{title:"Resources",permalink:"/thelia_doc/docs/api/resources"},next:{title:"Template",permalink:"/thelia_doc/docs/template"}},i={},c=[{value:"Create your addon",id:"create-your-addon",level:2},{value:"Attach parent resource",id:"attach-parent-resource",level:2},{value:"Define your properties",id:"define-your-properties",level:2},{value:"Add fields to parent routes",id:"add-fields-to-parent-routes",level:2},{value:"Specific case",id:"specific-case",level:2},{value:"<code>extendQuery</code>",id:"extendquery",level:3},{value:"<code>buildFromModel</code>",id:"buildfrommodel",level:3},{value:"<code>buildFromArray</code>",id:"buildfromarray",level:3},{value:"<code>doSave</code>",id:"dosave",level:3},{value:"<code>doDelete</code>",id:"dodelete",level:3}],s={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To allow module to add field in Thelia own model and to it's route (write or read) easily and quickly without to have to redefine all the models we have create the resources Addon."),(0,a.kt)("h2",{id:"create-your-addon"},"Create your addon"),(0,a.kt)("p",null,"Your addon can be anywhere but must implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"Thelia\\Api\\Resource\\ResourceAddonInterface")," for convenience you can use (and it's greatly encouraged) the trait ",(0,a.kt)("inlineCode",{parentName:"p"},"Thelia\\Api\\Resource\\ResourceAddonTrait"),".\nTo addon work well out of the box we advised to link your table directly to parent by id like explained ",(0,a.kt)("a",{parentName:"p",href:"/docs/propel#add-a-column-to-native-thelia-table"},"here"),".\nIn our example we are adding the latitude and longitude to customer's addresses. These come from a custom model named AddressData who contain additional data for Thelia addresses."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"An addon can also be a ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/Resources"},"resource")," to expose his own route (resource) and to add field to Thelia model (addon) at the same time.")),(0,a.kt)("h2",{id:"attach-parent-resource"},"Attach parent resource"),(0,a.kt)("p",null,"To tell which resource your addon want to add data we have the function ",(0,a.kt)("inlineCode",{parentName:"p"},"getResourceParent"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="local/modules/ApiOverride/Api/Resource/AddressData.php"',title:'"local/modules/ApiOverride/Api/Resource/AddressData.php"'},"public static function getResourceParent(): string\n{\n    return \\Thelia\\Api\\Resource\\Address::class;\n}\n")),(0,a.kt)("h2",{id:"define-your-properties"},"Define your properties"),(0,a.kt)("p",null,"Like for resource you must define every property (with their getters/setters) you want to be accessible from the api."),(0,a.kt)("h2",{id:"add-fields-to-parent-routes"},"Add fields to parent routes"),(0,a.kt)("p",null,"To make your field accessible to parent route you need to add parent groups to properties."),(0,a.kt)("p",null,"To add latitude and longitude to address in read and write routes :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="local/modules/ApiOverride/Api/Resource/AddressData.php"',title:'"local/modules/ApiOverride/Api/Resource/AddressData.php"'},"    #[Groups([Address::GROUP_READ, Address::GROUP_WRITE])]\n    public ?float $lat;\n\n    #[Groups([Address::GROUP_READ, Address::GROUP_WRITE])]\n    public ?float $lon;\n")),(0,a.kt)("h2",{id:"specific-case"},"Specific case"),(0,a.kt)("p",null,"In most case that will work directly, but sometimes you would need to implement some method :"),(0,a.kt)("h3",{id:"extendquery"},(0,a.kt)("inlineCode",{parentName:"h3"},"extendQuery")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public static function extendQuery(ModelCriteria $query, Operation $operation = null, array $context = []): void;\n")),(0,a.kt)("p",null,"This method allow you to modify query execute to retrieve parent data. So here you can add some join with your table and select your columns to retrieve them in results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    public static function extendQuery(ModelCriteria $query, Operation $operation = null, array $context = []): void\n    {\n        $tableMap = static::getPropelRelatedTableMap();\n        $query->useAddressDataQuery()->endUse();\n\n        foreach ($tableMap->getColumns() as $column) {\n            $query->withColumn(AddressDataTableMap::COL_LON, 'AddressData_lon');\n            $query->withColumn(AddressDataTableMap::COL_LAT, 'AddressData_lat');\n        }\n    }\n")),(0,a.kt)("h3",{id:"buildfrommodel"},(0,a.kt)("inlineCode",{parentName:"h3"},"buildFromModel")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function buildFromModel(ActiveRecordInterface $activeRecord, PropelResourceInterface $abstractPropelResource): self;\n")),(0,a.kt)("p",null,"Here you have to build your resource from query results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    public function buildFromModel(ActiveRecordInterface $activeRecord, PropelResourceInterface $abstractPropelResource): ResourceAddonInterface\n    {       \n        $this->lon = $activeRecord->getVirtualColumn('AddressData_lon\");\n        $this->lat = $activeRecord->getVirtualColumn('AddressData_lat\");\n\n        return $this;\n    }\n")),(0,a.kt)("h3",{id:"buildfromarray"},(0,a.kt)("inlineCode",{parentName:"h3"},"buildFromArray")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function buildFromArray(array $data, PropelResourceInterface $abstractPropelResource): self;\n")),(0,a.kt)("p",null,"Here you have to build your resource from array data that come from request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    public function build(ActiveRecordInterface $activeRecord, PropelResourceInterface $abstractPropelResource): ResourceAddonInterface\n    {       \n        $this->lon = $data['lon'];\n        $this->lat = $data['lat'];\n\n        return $this;\n    }\n")),(0,a.kt)("h3",{id:"dosave"},(0,a.kt)("inlineCode",{parentName:"h3"},"doSave")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function doSave(ActiveRecordInterface $activeRecord, PropelResourceInterface $abstractPropelResource): void;\n")),(0,a.kt)("p",null,"Called on write operation of the parent. This method is not needed if you don't put your field on write groups. But it's needed for the interface so you can just do a ",(0,a.kt)("inlineCode",{parentName:"p"},"return;"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    public function doSave(ActiveRecordInterface $activeRecord, PropelResourceInterface $abstractPropelResource): void\n    {\n        // You need first to create or retrieve the model\n        $model = $query->filterById($activeRecord->getId())\n            ->findOneOrCreate();\n            \n        // Then fill propel model from resource data\n        $model->setLon($abstractPropelResource->getLon());\n        $model->setLat($abstractPropelResource->getLat());\n\n        // And persist the model\n        $model->save();\n    }\n")),(0,a.kt)("h3",{id:"dodelete"},(0,a.kt)("inlineCode",{parentName:"h3"},"doDelete")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function doDelete(ActiveRecordInterface $activeRecord, PropelResourceInterface $abstractPropelResource): void;\n")),(0,a.kt)("p",null,"Called on delete operation of the parent. This method is not needed if you don't put your field on write groups. But it's needed for the interface so you can just do a ",(0,a.kt)("inlineCode",{parentName:"p"},"return;"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    public function doDelete(ActiveRecordInterface $activeRecord, PropelResourceInterface $abstractPropelResource): void\n    {\n        // You need first to create or retrieve the model\n        $model = $query->filterById($activeRecord->getId())\n            ->findOneOrCreate();\n            \n\n        // And then delete the model\n        $model->delete();\n    }\n")))}u.isMDXComponent=!0}}]);