"use strict";(self.webpackChunkthelia=self.webpackChunkthelia||[]).push([[6213],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=o.createContext({}),i=function(e){var t=o.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=i(e.components);return o.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},s=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=i(n),d=r,f=s["".concat(m,".").concat(d)]||s[d]||p[d]||a;return n?o.createElement(f,c(c({ref:t},u),{},{components:n})):o.createElement(f,c({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=s;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<a;i++)c[i]=n[i];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4615:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return m},default:function(){return s},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),c=["components"],l={title:"Create your own"},m=void 0,i={unversionedId:"commands/create",id:"commands/create",title:"Create your own",description:"How to declare commands ?",source:"@site/docs/commands/create.md",sourceDirName:"commands",slug:"/commands/create",permalink:"/thelia_doc/docs/commands/create",editUrl:"https://github.com/real-goatoo/thelia_doc/edit/master/docs/commands/create.md",tags:[],version:"current",frontMatter:{title:"Create your own"},sidebar:"myAutogeneratedSidebar",previous:{title:"How it works",permalink:"/thelia_doc/docs/commands/"},next:{title:"Thelia commands",permalink:"/thelia_doc/docs/commands/thelia"}},u=[{value:"How to declare commands ?",id:"how-to-declare-commands-",children:[],level:2}],p={toc:u};function s(e){var t=e.components,n=(0,r.Z)(e,c);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how-to-declare-commands-"},"How to declare commands ?"),(0,a.kt)("p",null,"In your config file :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'    <commands>\n        <command class="MyModule\\Commands\\HelloWorld"/>\n    </commands>\n')),(0,a.kt)("p",null,"Create now a HelloWorld.php file in directory MyModule/Commands, and create a HelloWorld, which has to extend ",(0,a.kt)("em",{parentName:"p"},"Thelia\\Command\\ContainerAwareCommand")," and implement at least the ",(0,a.kt)("em",{parentName:"p"},"configure")," and\n",(0,a.kt)("em",{parentName:"p"},"execute")," methods."),(0,a.kt)("p",null,"For example :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nnamespace MyModule\\Commands;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nuse Thelia\\Command\\ContainerAwareCommand;\n\nclass HelloWorld extends ContainerAwareCommand\n{\n    protected function configure()\n    {\n        $this\n            ->setName("hello:world")\n            ->setDescription("output hello world");\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->writeln("Hello world !");\n    }\n}\n\n')),(0,a.kt)("p",null,"You can now test the results using Thelia CLI tools. Go to your Thelia root directory and use this command :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ php Thelia hello:world\n")),(0,a.kt)("p",null,'Thelia uses all the features of the Symfony "command" component so you can refer to ',(0,a.kt)("a",{href:"http://symfony.com/doc/2.2/components/console/index.html",target:"_blank"},"this component documentation")," to create your Thelia commands."))}s.isMDXComponent=!0}}]);